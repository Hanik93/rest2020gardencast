#%RAML 1.0
title: GardenCast
description: GardenCast REST API specification.
baseUri: http://ab-rest-8.netlab.hof-university.de/{version}
version: v1
protocols: [ HTTP ]
mediaType: [ application/json ]
documentation: 
  - title: Home
    content: |
      Welcome to the _GardenCast API_ Documentation. The _GardenCast API_
      allows you to connect your application to receive weather forecast data
      and information about plants, weather and a custom search.

securitySchemes: 
  oauth_2_0: !include traits/oauth_2_0.raml

# Objects
types:
  User: !include types/User.raml
  Token: !include types/Token.raml

/weather:
  description: |
    Retrieves information about weather.
    **NOTE** All parameters are optional, but you must select at least one parameter.
    Calling the API by city ID (using the id parameter) will provide the most precise location results.
  get:
    queryParameters:
      lat:
        displayName: Latitude
        type: number
        description: geographical latitude
        example: 50.3135
        required: false
      long:
        displayName: Longitude
        type: number
        description: geographical longitude
        example: 11.9128
        required: false
      cityID:
        displayName: City ID
        type: number
        description: City ID. You can call by city ID. API responds with exact result. The List of city IDs can be downloaded [here](http://bulk.openweathermap.org/sample/).                                         You can include multiple cities in parameter &mdash; just separate them by commas
        example: 2172797
        required: false
      cityName:
        displayName: City Name
        type: string
        description: City Name. You can call by city name, or by city name and country code. The API responds with a list of results that match a searching word. For the query value, type the                       city name and optionally the country code divided by comma
        example: Hof
        required: false
      zipCode:
        displayName: ZIP Code
        type: string
        description: Search by zip code. Please note if country is not specified then the search works for GER as a default."
        example: 95025,ger
        required: false
    responses: 
      200:
        description: SUCCESS
        body:
          application/json:
            type: object
            example: !include examples/json/weather.json
      400:
        description: BAD REQUEST, CHECK PARAMETERS
        body:
          application/json:
            type: object
            example:
              message: Bad request
      401:
        description: Unauthorized
        body:
          application/json:
            type: object
            example:
              message: Unauthorized

/notesForPlants:
  description: |
    This endpoint can be used in two ways.
    Call it with weather information to recieve plants that are affected by this weather.
    Or call by plants and get back weather information corresponding to the plant that was called.
    Its also possible to input a month and recieve a list of plants to best plant during this month.
  get:
    queryParameters:
      minTemperature:
        displayName: Minimum Temperature
        type: number
        description: The minimum tolerable temperature for the species. In celsius or fahrenheit degrees
        example: 10
        required: false
      maxTemperature:
        displayName: Maximum Temperature
        type: number
        description: The maximum tolerable temperature for the species. In celsius or fahrenheit degrees
        example: 30
        required: false
      months:
        displayName: Months
        type: string
        description: The most active growth months of the species (usually all year round for perennial plants)
        example: April
        required: false
    responses:
      200:
        description: SUCCESS
        body:
          application/json:
            example: !include examples/json/notesForPlants.json
      400:
        description: BAD REQUEST, CHECK PARAMETERS
        body:
          application/json:
            type: object
            example:
              message: Bad request
      401:
        description: Unauthorized
        body:
          application/json:
            type: object
            example:
              message: Unauthorized

/bestPlantedIn:
  description: this endpoint can be used to retrieve a list of months in which the specified plant is best to be planted along with other useful information for caretaking
  get:
    queryParameters:
      plantName:
        displayName: Plant Name
        type: string
        description: The name of the plant according to which the months will be displayed
        example: Aloe Vera
        required: true
    responses:
      200:
        description: SUCCESS
        body:
          application/json:
            example: !include examples/json/bestPlantedIn.json
      400:
        description: BAD REQUEST, CHECK PARAMETERS
        body:
          application/json:
            type: object
            example:
              message: Bad request
      401:
        description: Unauthorized
        body:
          application/json:
            type: object
            example:
              message: Unauthorized

/plants:
  /search:
    /{search_string}:
      get:
        description: List of plants, whose common or latin name matches the input string
        responses:
          200:
            description: SUCCESS
            body:
              application/json:
                example: !include examples/json/plantSearch.json
          404:
            description: NOTFOUND
            body:
              application/json:
                type: object
                example:
                  message: Not found
      post:

/identification:
  get:
  post:
  put:
    description: for sending a base64 encoded image(s) to the server in order to be identified along with additional info
    body:
      application/json:
        example: !include examples/json/identificationRequest.json
    responses:
      200:
        description: SUCCESS
        body:
            application/json:
              example: !include examples/json/identification.json

/users:
  /{userId}:
    get:
      securedBy: [oauth_2_0]
      description: Get the details of a user.
      responses: 
        200:
          body:
            application/json:
              type: User
              example: !include examples/user.raml
    put:
      securedBy: [oauth_2_0]
      description: Update multiple user information.
      body:
      responses: 
        200:
          description: Successfully updated.
    delete:
      securedBy: [oauth_2_0]
      responses: 
        204:
          description: User deleted.
        401:
          description: Not authorized.
        403:
          description: Forbidden.
        404:
          description: User not found.
        410:
          description: User is already deleted.
    /favorites:
      get:
      post:
        securedBy: [oauth_2_0]
      put:
        securedBy: [oauth_2_0]
      delete:
        securedBy: [oauth_2_0]

/auth:
  /login:
    post:
      body: 
        application/json:
          type: object
          example: !include examples/login.raml
      responses:
        200:
          body:
            application/json:
              type: Token
              example: !include examples/token.raml
        400:
          body:
            application/json:
              type: object
              example:
                message: Invalid credentials
        404:
          description: User not found
          body:
            application/json:
              type: object
              example:
                message: User not found
  /register:
    post:
      body:
        application/json:
          type: User
          example: !include examples/register.raml
      responses:
        201:
          description: Created a user
          headers:
            Location:
              description: The location of the created user.
          body:
            application/json:
              type: User
              example: !include examples/user.raml
        400:
          description: E-Mail already exists
          body:
            application/json:
              type: object
              example:
                message: E-Mail already exists
  /logout:
    post:
      securedBy: [oauth_2_0]